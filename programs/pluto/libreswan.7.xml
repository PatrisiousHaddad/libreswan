<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<refentry id="libreswan7">
  <refmeta>
    <refentrytitle>LIBRESWAN</refentrytitle>
    <manvolnum>7</manvolnum>
    <refmiscinfo class="date">4 December 2023</refmiscinfo>
    <refmiscinfo class="source">libreswan</refmiscinfo>
  </refmeta>

  <refnamediv id="name">
    <refname>libreswan</refname>
    <refpurpose>
      Internet Key Exchange Manager for IPsec
    </refpurpose>
  </refnamediv>

  <refsect1 id="description">

    <title>
      DESCRIPTION
    </title>

    <para>
      <application>Libreswan</application> is an Internet Key Exchange
      (IKE) manager.

      It consists of the Internet Key Exchange Daemon
      <command>pluto</command> (see
      <citerefentry> <refentrytitle>ipsec_pluto</refentrytitle>
      <manvolnum>8</manvolnum> </citerefentry>), the auxiliary command
      <command>ipsec</command> that provides a way to
      manipulate <command>pluto</command> (see
      <citerefentry> <refentrytitle>ipsec</refentrytitle>
      <manvolnum>8</manvolnum> </citerefentry>), and the configuration
      file <filename>ipsec.conf</filename> (see 
      <citerefentry> <refentrytitle>ipsec.conf</refentrytitle>
      <manvolnum>5</manvolnum> </citerefentry>).

      For authentication, <application>Libreswan</application> can use
      an <application>NSS</application> trust store containing
      <application>X.509</application> or raw private keys, or a
      preshared secret (see <citerefentry>
      <refentrytitle>ipsec.secrets</refentrytitle>
      <manvolnum>5</manvolnum> </citerefentry>).
    </para>

    <para>
      <application>Libreswan</application> is used to automatically
      build shared "Security Associations" on a system that has IPsec,
      the secure IP protocol. In other words,
      <application>Libreswan</application> can eliminate much of the
      work of manual keying.  The actual secure transmission of
      packets is the responsibility of the kernel.
      <application>Libreswan</application> can talk to various kernel
      implementations, such as the <application>Linux
      XFRM</application> and <application>BSD KAME</application> IPsec
      stacks.
    </para>

    <para>
      <application>Libreswan</application> implements version 1 and 2
      of the Internet Key Exchange Protocol.
    </para>

    <refsect2 id="ike_overview">
      <title>Internet Key Exchange Protocol version 2</title>

      <para>
	A <emphasis>Security Association</emphasis>
	(<emphasis>SA</emphasis>) is an agreement between two network
	nodes on how to process certain traffic between them. This
	processing may involve encapsulation, authentication,
	encryption, and compression.  Given that manually establishing
	these associations does not scale, the <application>Internet
	Key Exchange Protocol</application>
	(<application>IKE</application>) provides a way to establish
	these associations dynamically.
      </para>

      <para>
	<application>IKE</application> can be deployed on a network
	node to negotiate Security Associations for that node.  These
	<application>IKE</application> implementations can only
	negotiate with other <application>IKE</application>
	implementations, so <application>IKE</application> must be on
	each node that is to be an endpoint of an
	<application>IKE</application>-negotiated Security
	Association.  No other nodes need to be running
	<application>IKE</application>.
      </para>

      <para>
	An <application>IKE</application> instance (i.e. an IKE
	implementation on a particular network node) communicates with
	other <application>IKE</application> instance using either UDP
	or TCP IP packets, so there must be a route between the nodes
	in each direction.
      </para>

      <para>
	The negotiation of Security Associations requires a number of
	choices that involve tradeoffs between security, convenience,
	trust, and efficiency. These are policy issues and are
	normally specified to the IKE instance by the system
	administrator.
      </para>

      <para>
	<application>IKE</application> deals with two kinds of
	Security Associations.  The first part of a negotiation
	between IKE instances is to build an IKE SA.  An IKE SA is
	used to protect communication between the two IKEs.  Child SAs
	(for IPsec) can then be built by the IKEs - these are used to
	carry protected IP traffic between the systems.
      </para>

      <para>
	Negotiating an IKE SA (refered to as the The Initial
	Exchanges) consists of at least the IKE_SA_INIT exchange to
	establish a secured channel, and the IKE_AUTH exchange to
	prove identity.  Extensions, such as EAP and INTERMEDIATE, may
	add further exchanges.
      </para>

      <para>
	Negotiating a Child SA requires a single CREATE_CHILD_SA
	exchange.  As an optimization, the first Child SA's
	negotiation may be piggybacked on the IKE_AUTH exchange.
      </para>

      <para>
	IKE instances must be able to authenticate each other as part
	of their negotiation of an ISAKMP SA. This can be done by
	several mechanisms described in the draft standards.
      </para>

      <para>
	IKE negotiation can be initiated by any instance with any
	other.  If both can find an agreeable set of characteristics
	for a Security Association, and both recognize each others
	authenticity, they can set up a Security Association.  The
	standards do not specify what causes an IKE instance to
	initiate a negotiation.
      </para>

      <para>
	In summary, an IKE instance is prepared to automate the
	management of Security Associations in an IPsec environment,
	but a number of issues are considered policy and are left in
	the system administrator's hands.
      </para>

    </refsect2>

    <refsect2 id="libreswan">
      <title>Libreswan</title>

      <para>
	<application>Libreswan</application> implements the Internet
	Key Exchange (both versions 1 and 2).  It runs as a daemon
	(called <command>pluto</command>) on a network node.
	Currently, this network node must be a
	<application>Linux</application>,
	<application>NetBSD</application>,
	<application>FreeBSD</application>, or
	<application>OpenBSD</application> system.
      </para>

      <para>
	The policy for acceptable characteristics for Security
	Associations are specified using the configuration file
	<filename>ipsec.conf</filename> (see <citerefentry>
	<refentrytitle>ipsec.conf</refentrytitle>
        <manvolnum>5</manvolnum> </citerefentry>).
      </para>

      <para>
	<application>Libreswan</application> can be configured to
	authenticate its peer using shared secrets or using public and
	private keys (see <citerefentry>
	<refentrytitle>ipsec.conf</refentrytitle>
	<manvolnum>5</manvolnum> </citerefentry>).  Shared secrets are
	stored in the file <filename>ipsec.secrets</filename> (see
	<citerefentry> <refentrytitle>ipsec.secrets</refentrytitle>
	<manvolnum>5</manvolnum> </citerefentry>).  Public keys (for
	instance, X.509 certificates) are stored in either
	<application>Libreswan's</application>
	<application>NSS</application> trust store, obtained from the
	peer, or using DNS(SEC).  Corresponding Private keys are
	always stored in the <application>Libreswan's</application>
	<application>NSS</application> trust store.
      </para>

      <para>
	<application>Libreswan</application> initiates negotiation of a
	Security Association when:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    it is manually prodded (see <citerefentry>
	    <refentrytitle>ipsec_up</refentrytitle>
            <manvolnum>8</manvolnum> </citerefentry>)
	  </para>
	</listitem>
	<listitem>
	  <para>
	    it is configured to negotiate on-demand and traffic
	    flow (see <citerefentry>
	    <refentrytitle>ipsec_route</refentrytitle>
            <manvolnum>8</manvolnum> </citerefentry>)
	  </para>
	</listitem>
	<listitem>
	  <para>
	    it is configured to negotate from startup (see
	    <computeroutput>auto=up</computeroutput> in <citerefentry>
	    <refentrytitle>ipsec.conf</refentrytitle>
            <manvolnum>5</manvolnum> </citerefentry>)
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	<command>Libreswan</command> implements IKE SAs itself.  After
	it has negotiated the characteristics for a Child SA (IPsec
	SA), it directs the <application>kernel</application> to
	install the association.  If necessary, it also invokes a
	script to adjust any firewall or routing rules (see
	<citerefentry> <refentrytitle>ipsec_updown</refentrytitle>
	<manvolnum>5</manvolnum> </citerefentry>).
      </para>

      <para>
	When <application>Libreswan</application> shuts down, it
	closes all Security Associations.
      </para>
    </refsect2>

    <refsect2 id="the_updown_command">
      <title>
	The <command>updown</command> command
      </title>

      <para>
	Whenever <application>libreswan</application> brings a
	connection up or down, it invokes the
	<command>updown</command> command.  This command is specified
	either using <filename>ipsec.conf</filename> configuration
	file option <computeroutput>leftupdown=</computeroutput> or
	the <command>ipsec whack</command> option
	<option>--updown</option> option.  This allows for customized
	control over routing and firewall manipulation.
      </para>

      <para>
	The <command>updown</command> script is invoked for five
	different operations.  The operation name, with
	<literal>-host</literal>, <literal>-client</literal> and
	<literal>-v6</literal>, appended is passed to the
	<command>updown</command> script using the environment
	variable <varname>PLUTO_VERB</varname> (see below) The
	operations, in the order they are normally invoked, are as
	follows:
      </para>

      <variablelist>
        <varlistentry>
          <term><literal>prepare</literal></term>
          <listitem>
            <para>
	      is run before bringing up a new connection if no other
	      connection with the same clients is up.  Generally, this
	      is useful for deleting a route that might have been set
	      up before <application>libreswan</application> was
	      started or perhaps by some agent not known to
	      <application>libreswan</application>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>route</literal></term>
          <listitem>
            <para>
	      is run when bringing up a connection for a new peer
	      client subnet (even if <literal>prepare</literal> was
	      run).  The command should install a suitable route.
	      Routing decisions are based only on the destination
	      (peer's client) subnet address, unlike kernel policy
	      (SPDs) which discriminate based on source too.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>up</literal></term>
          <listitem>
            <para>
	      is run when first bringing up the IPsec tunnel for a
	      pair of client subnets.  This command should install
	      firewall rules as appropriate. It is generally a good
	      idea to allow IKE messages (UDP port 500) travel between
	      the hosts.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>down</literal></term>
          <listitem>
            <para>
	      is run when bringing down the IPsec tunnel for a pair of
	      client subnets.  This command should delete firewall
	      rules as appropriate.  Note that there may remain some
	      inbound IPsec SAs with these client subnets.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>unroute</literal></term>
          <listitem>
            <para>
	      is run when bringing down the last connection for a
	      particular peer client subnet.  It should undo what
	      <literal>route</literal> did.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The script is passed a large number of environment variables
	to specify what needs to be done:
      </para>

      <variablelist>

        <varlistentry>
          <term><varname>PLUTO_VERB</varname></term>
          <listitem>
            <para>
	      specifies the name of the operation to be performed
	      (<literal>prepare-host</literal>,
	      <literal>prepare-client</literal>,
	      <literal>prepare-host-v6</literal>,
	      <literal>prepare-client-v6</literal>;
	      <literal>route-host</literal>,
	      <literal>route-client</literal>,
	      <literal>route-host-v6</literal>,
	      <literal>route-client-v6</literal>;
	      <literal>up-host</literal>,
	      <literal>up-client</literal>,
	      <literal>up-host-v6</literal>,
	      <literal>up-client-v6</literal>;
	      <literal>down-host</literal>,
	      <literal>down-client</literal>,
	      <literal>down-host-v6</literal>,
	      <literal>down-client-v6</literal>;
	      <literal>unroute-host</literal>,
	      <literal>unroute-client</literal>,
	      <literal>unroute-host-v6</literal>,
	      <literal>unroute-client-v6</literal>).  If the address
	      family for security gateway to security gateway
	      communications is IPv6, then a suffix of -v6 is added to
	      the verb.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_CONNECTION</varname></term>
          <listitem>
            <para>
	      is the name of the connection for which we are
              routing.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_NEXT_HOP</varname></term>
          <listitem>
            <para>
	      is the next hop to which packets bound for the peer must be
              sent.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_INTERFACE</varname></term>
          <listitem>
            <para>
	      is the name of the ipsec interface to be used.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_ME</varname></term>
          <listitem>
            <para>
	      is the IP address of our host.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_CLIENT</varname></term>
          <listitem>
            <para>
	      is the IP address / count of our client subnet. If the
	      client is just the host, this will be the host's own IP
	      address / max (where max is 32 for IPv4 and 128 for
	      IPv6).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_CLIENT_NET</varname></term>
          <listitem>
            <para>
	      is the IP address of our client net. If the client is
	      just the host, this will be the host's own IP
	      address.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_CLIENT_MASK</varname></term>
          <listitem>
            <para>
	      is the mask for our client net. If the client is just
	      the host, this will be 255.255.255.255.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER</varname></term>
          <listitem>
            <para>
	      is the IP address of our peer.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_CLIENT</varname></term>
          <listitem>
            <para>
	      is the IP address / count of the peer's client
	      subnet. If the client is just the peer, this will be the
	      peer's own IP address / max (where max is 32 for IPv4
	      and 128 for IPv6).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_CLIENT_NET</varname></term>
          <listitem>
            <para>
	      is the IP address of the peer's client net. If the
	      client is just the peer, this will be the peer's own IP
	      address.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_CLIENT_MASK</varname></term>
          <listitem>
            <para>
	      is the mask for the peer's client net. If the client is
	      just the peer, this will be 255.255.255.255.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_PROTOCOL</varname></term>
          <listitem>
            <para>
	      lists the protocols allowed over this IPsec SA.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_PROTOCOL</varname></term>
          <listitem>
            <para>
	      lists the protocols the peer allows over this IPsec SA.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_PORT</varname></term>
          <listitem>
            <para>
	      lists the ports allowed over this IPsec SA.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_PORT</varname></term>
          <listitem>
            <para>
	      lists the ports the peer allows over this IPsec SA.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_MY_ID</varname></term>
          <listitem>
            <para>
	      lists our id.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_ID</varname></term>
          <listitem>
            <para>
	      lists our peer's id.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PLUTO_PEER_CA</varname></term>
          <listitem>
            <para>
	      lists the peer's CA.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	All output sent by the script to stderr or stdout is
	logged. The script should return an exit status of 0 if and
	only if it succeeds.
      </para>

      <para>
	<command>pluto</command> waits for the script to finish and
	will not do any other processing while it is waiting. The
	script may assume that <command>pluto</command> will not
	change anything while the script runs. The script should avoid
	doing anything that takes much time and it should not issue
	any command that requires processing by
	<command>pluto</command>.  Either of these activities could be
	performed by a background subprocess of the script.
      </para>

    </refsect2>

  </refsect1>

<!--
  <refsect1>
    <title>
      EXAMPLES
    </title>
    <refsect2>
      <title>
      </title>
      <para>
      </para>
    </refsect2>
    </refsect1>
-->

  <refsect1>
    <title>
      OLD DESCRIPTION
    </title>

    <para>
      What follows is older documentation.  Patches to overhaul it
      welcome.
    </para>

    <refsect2 id="before_running_pluto">
      <title>Before Running Pluto</title>

      <para>
	<command>pluto</command> runs as a daemon with userid
	root. Before running it, a few things must be set up.
      </para>

      <para>
	<command>pluto</command> requires a working IPsec stack.
      </para>

      <para>
	<command>pluto</command> supports multiple public
	networks (that is, networks that are considered insecure and thus
	need to have their traffic encrypted or authenticated). It discovers
	the public interfaces to use by looking at all interfaces that are
	configured (the <option>--interface</option> option can be used to limit
	the interfaces considered). It does this only when
	<emphasis>whack</emphasis> tells it to --listen, so the interfaces must
	be configured by then. The <option>--listen</option> can be used to
	limit listening on only 1 IP address of a certain interface.
	<citerefentry><refentrytitle>ip</refentrytitle><manvolnum>8</manvolnum>
        </citerefentry> with the <option>addr</option> option will show the name
	and status of each network interface.
      </para>

      <para>
	<command>pluto</command> requires a database of
	preshared secrets and RSA private keys. This is described in the
	<citerefentry>
          <refentrytitle>ipsec.secrets</refentrytitle>
          <manvolnum>5</manvolnum>
        </citerefentry>. <command>pluto</command> is told of RSA
	public keys via <command>whack</command> commands. If the
	connection is Opportunistic, and no RSA public key is known,
	<emphasis>pluto</emphasis> will attempt to fetch RSA keys using the
	Domain Name System.
      </para>
    </refsect2>

    <refsect2 id="setting_up_netkey_for_pluto">
      <title>
	Setting up <emphasis>XFRM</emphasis> for <emphasis>pluto</emphasis>
      </title>

      <para>
	No special requirements are necessary to use XFRM - it ships
	with all modern versions of Linux 2.4 and later.
      </para>
    </refsect2>

    <refsect2 id="ipsecsecrets_file">
      <title>ipsec.secrets file</title>

      <para>
	A <command>pluto</command> daemon and another IKE
	daemon (for example, another instance of <emphasis>pluto</emphasis>)
	must convince each other that they are who
	they are supposed to be before any negotiation can succeed. This
	authentication is accomplished by using either secrets that have been
	shared beforehand (manually) or by using RSA signatures. There are other
	techniques, but they have not been implemented in
	<emphasis>pluto</emphasis>.
      </para>

      <para>
	The file <filename>@@IPSEC_SECRETS@@</filename> is used to
	keep preshared secret keys and XAUTH passwords. RSA private
	keys, X.509 certificates, CRLs, OCSP and smartcards are
	handled via NSS. For debugging, there is an argument to the
	<emphasis>pluto</emphasis> command to use a
	different file. This file is described in
	<citerefentry>
	  <refentrytitle>ipsec.secrets</refentrytitle><manvolnum>5</manvolnum>
	</citerefentry>.
      </para>
    </refsect2>

    <refsect2 id="running_pluto">
      <title>Running Pluto</title>

      <para>
	To fire up the daemon, just type <emphasis>pluto</emphasis>
	(be sure to be running as the superuser). The
	default IKE port number is 500, the UDP port assigned by IANA for IKE
	Daemons. <command>pluto</command> must be run by the
	superuser to be able to use the UDP 500 port. If pluto is told to enable
	NAT-Traversal, then UDP port 4500 is also taken by pluto to listen
	on.
      </para>

      <para>
	Pluto supports different IPstacks on different operating
	systems.  This can be configured using one of the options
	<option>--use-netkey</option> (Linux),
	<option>--use-bsdkame</option> (BSD).  On startup, pluto might
	also read the <option>protostack=</option> option to select
	the IPsec stack to use if <option>--config
	/etc/ipsec.conf</option> is given as argument to pluto.  If
	both <option>--use-XXX</option> and <option>--config
	/etc/ipsec.conf</option> are specified, the last command line
	argument specified takes precedence.
      </para>

      <para>
	Pluto supports RFC 3947 NAT-Traversal.  The allowed range
	behind the NAT routers is submitted using the
	<option>--virtual-private</option> option. See <citerefentry>
        <refentrytitle>ipsec.conf</refentrytitle>
        <manvolnum>5</manvolnum>
        </citerefentry> for the syntax. The option
	<option>--force-keepalive</option> forces the sending of the
	<emphasis>keep-alive packets</emphasis>, which are send to prevent the
	NAT router from closing its port when there is not enough traffic on the
	IPsec connection. The <option>--keep-alive</option> sets the delay (in
	seconds) of these keep-alive packets. The newer NAT-T standards support
	<emphasis>port floating</emphasis>, and Libreswan enables this
	per default.
      </para>

      <para>
	Pluto supports the use of X.509 certificates and sends certificates
	when needed. Pluto uses NSS for all X.509 related data, including
	CAcerts, certs, CRLs and private keys. The <emphasis>Certificate
	Revocation Lists</emphasis>
	can also be retrieved from an URL. The option
	<option>--crlcheckinterval</option> sets the time between checking
	for CRL expiration and issuing new fetch commands.
	Pluto logs a warning if no valid CRL was loaded or obtained for a
	connection. If <option>--crl-strict</option> is given, the
	connection will be rejected until a valid CRL has been loaded.
      </para>

      <para>
	Pluto can also use helper children to off-load cryptographic
	operations. This behavior can be fine tuned using the
	<option>--nhelpers</option>. Pluto will start
	<emphasis>(n-1)</emphasis> of them, where <emphasis>n</emphasis>
	is the number of CPU's you have (including
	hypherthreaded CPU's). A value of <emphasis>0</emphasis>
	forces pluto to do all operations in the main process. A value of
	<emphasis>-1</emphasis> tells pluto to perform the above
	calculation. Any other value forces the number to that amount.
      </para>

      <para>
	Pluto uses the NSS crypto library as its random source. Some
	government Three Letter Agency requires that pluto reads 440 bits
	from /dev/random and feed this into the NSS RNG before drawing
	random from the NSS library, despite the NSS library itself
	already seeding its internal state. As this process can block
	pluto for an extended time, the default is to not perform this
	redundant seeding. The <option>--seedbits</option>
	option can be used to specify the number of bits that will be
	pulled from /dev/random and seeded into the NSS RNG.  This can
	also be accomplished by specifying seedbits in the "config setup"
	section of ipsec.conf. This option should not be used by most people.
      </para>

      <para>
	<command>pluto</command> attempts to create a lockfile
	with the name <filename>@@RUNDIR@@/pluto.pid</filename>. If the
	lockfile cannot be created, <command>pluto</command> exits -
	this prevents multiple <command>pluto</command>s from
	competing Any "leftover" lockfile must be removed before
	<emphasis>pluto</emphasis> will run. <emphasis>pluto</emphasis>
	writes its PID into this file so that scripts
	can find it. This lock will not function properly if it is on an NFS
	volume (but sharing locks on multiple machines doesn't make sense
	anyway).
      </para>

      <para>
	<command>pluto</command> then forks and the parent
	exits. This is the conventional "daemon fork". It can make debugging
	awkward, so there is an option to suppress this fork. In certain
	configurations, pluto might also launch helper programs to assist with
	DNS queries or to offload cryptographic operations.
      </para>

      <para>
	All logging, including diagnostics, is sent to <citerefentry>
	<refentrytitle>syslog</refentrytitle> <manvolnum>3</manvolnum>
	</citerefentry> with facility=authpriv; it decides where to
	put these messages (possibly in /var/log/secure or
	/var/log/auth.log). Since this too can make debugging awkward,
	the option <option>--stderrlog</option> is used to steer
	logging to stderr.
      </para>

      <para>
	Alternatively, <option>--logfile</option> can be used to send all
	logging information to a specific file.
      </para>

      <para>
	Once <command>pluto</command> is started, it waits for
	requests from <command>whack</command>.
      </para>
    </refsect2>

    <refsect2 id="plutos_internal_state">
      <title>Pluto's Internal State</title>

      <para>
	To understand how to use <command>pluto</command>, it
	is helpful to understand a little about its internal state. Furthermore,
	the terminology is needed to decipher some of the diagnostic
	messages.
      </para>

      <para>
	Pluto supports <emphasis>food groups</emphasis> for Opportunistic
	IPsec. The policies for these are located in /etc/ipsec.d/policies,
	or another directory as specified by <option>--ipsecdir</option>.
      </para>

      <para>
	Pluto supports X.509 Certificates. All certificate handling is done
	using the NSS library and all certificate material is stored in an
	NSS database in @@IPSEC_NSSDIR@@ or another directory as specified
	by <option>--nssdir</option>.
      </para>

      <para>
	Pluto may core dump. It will normally do so into the current
	working directory. You can specify the --coredir option for pluto, or
	specify the dumpdir= option in ipsec.conf.
      </para>

      <para>
	If you are investigating a potential memory leak in pluto,
	start pluto with the --leak-detective option.  Before the leak
	causes the system or pluto to die, shut down pluto in the regular
	way. pluto will display a list of leaks it has detected.
      </para>

      <para>
	If you are investigating a potential use-after-free or
	double-free in pluto, first build pluto with USE_EFENCE=true
	and then start pluto with --efence-protect.  See
	<citerefentry> <refentrytitle>efence</refentrytitle>
	<manvolnum>2</manvolnum> </citerefentry> and EF_PROTECT_BELOW
	and EF_PROTECT_FREE.
      </para>

      <para>
	The <emphasis>(potential) connection</emphasis> database
	describes attributes of a connection. These include the IP addresses of
	the hosts and client subnets and the security characteristics desired.
	<command>pluto</command> requires this information (simply
	called a connection) before it can respond to a request to build an SA.
	Each connection is given a name when it is created, and all references
	are made using this name.
      </para>

      <para>
	During the IKE exchange to build an SA, the information about the
	negotiation is represented in a <emphasis>state
	object</emphasis>. Each state object reflects how far the negotiation
	has reached. Once the negotiation is complete and the SA established,
	the state object remains to represent the SA. When the SA is terminated,
	the state object is discarded. Each State object is given a serial
	number and this is used to refer to the state objects in logged
	messages.
      </para>

      <para>
	Each state object corresponds to a connection and can be thought
	of as an instantiation of that connection. At any particular time, there
	may be any number of state objects corresponding to a particular
	connection. Often there is one representing an ISAKMP SA and another
	representing an IPsec SA.
      </para>

      <para>
	<emphasis>XFRM</emphasis> requires no special routing.
      </para>

      <para>
	Each connection may be routed, and must be while it has an IPsec
	SA. The connection specifies the characteristics of the route: the
	interface on this machine, the "gateway" (the nexthop), and the peer's
	client subnet. Two connections may not be simultaneously routed if they
	are for the same peer's client subnet but use different interfaces or
	gateways (<command>pluto</command>'s logic does not reflect
	any advanced routing capabilities).
      </para>

      <para>
	When <command>pluto</command> needs to install a route
	for a connection, it must make sure that no conflicting route is in use.
	If another connection has a conflicting route, that route will be taken
	down, as long as there is no IPsec SA instantiating that connection. If
	there is such an IPsec SA, the attempt to install a route will
	fail.
      </para>

      <para>
	There is an exception. If <command>pluto</command>, as
	Responder, needs to install a route to a fixed client subnet for a
	connection, and there is already a conflicting route, then the SAs using
	the route are deleted to make room for the new SAs. The rationale is
	that the new connection is probably more current. The need for this
	usually is a product of Road Warrior connections (these are explained
	later; they cannot be used to initiate).
      </para>

      <para>
	When <command>pluto</command> needs to install an
	eroute for an IPsec SA (for a state object), first the state object's
	connection must be routed (if this cannot be done, the eroute and SA
	will not be installed). If a conflicting eroute is already in place for
	another connection, the eroute and SA will not be installed (but note
	that the routing exception mentioned above may have already deleted
	potentially conflicting SAs). If another IPsec SA for the same
	connection already has an eroute, all its outgoing traffic is taken over
	by the new eroute. The incoming traffic will still be processed. This
	characteristic is exploited during rekeying.
      </para>
    </refsect2>

    <refsect2 id="using_whack">
      <title>Using whack</title>

      <para>
	<command>whack</command> is used to command a running
	<command>pluto</command>. <emphasis>whack</emphasis> uses
	a UNIX domain socket to speak to <command>pluto</command>
	(by default, <filename>@@RUNDIR@@/pluto.ctl</filename>).
      </para>

      <para>
	<command>whack</command> has an intricate argument
	syntax. This syntax allows many different functions to be specified. The
	help form shows the usage or version information. The connection form
	gives <command>pluto</command> a description of a potential
	connection. The public key form informs <emphasis>pluto</emphasis>
	of the RSA public key for a potential peer.
	The delete form deletes a connection description and all SAs
	corresponding to it. The listen form tells <emphasis>pluto</emphasis>
	to start or stop listening on the public
	interfaces for IKE requests from peers. The route form tells
	<emphasis>pluto</emphasis> to set up routing for a connection; the
	unroute form undoes this. The initiate form tells
	<emphasis>pluto</emphasis> to negotiate an SA corresponding to a
	connection. The terminate form tells <emphasis>pluto</emphasis>
	to remove all SAs corresponding to a
	connection, including those being negotiated. The status form displays
	the <command>pluto</command>'s internal state. The debug
	form tells <command>pluto</command> to change the selection
	of debugging output "on the fly". The shutdown form tells
	<emphasis>pluto</emphasis> to shut down, deleting all SAs.
      </para>

      <para>
	The crash option asks pluto to consider a particularly target IP
	to have crashed, and to attempt to restart all connections with that IP
	address as a gateway. In general, you should use Dead Peer Detection to
	detect this kind of situation automatically, but this is not always
	possible.
      </para>

      <para>
	Most options are specific to one of the forms, and will be
	described with that form. There are three options that apply to all
	forms.
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--ctlsocket</option> <replaceable>@@RUNDIR@@/pluto.ctl</replaceable>
	  </term>
          <listitem>
            <para>
	      <emphasis>@@RUNDIR@@/pluto.ctl</emphasis> is used as the UNIX
	      domain socket for talking to <emphasis>pluto</emphasis>.
	      Use either this option or
	      <option>--rundir</option>, but not both.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--rundir</option> <replaceable>@@RUNDIR@@</replaceable>
	  </term>
          <listitem>
            <para>
	      <emphasis>@@RUNDIR@@</emphasis> where the UNIX
	      domain socket <emphasis>pluto.ctl</emphasis> for talking to
	      the <emphasis>pluto</emphasis>,
	      the <emphasis>pluto.pid</emphasis> file are.
	      Use either this option or <emphasis>--ctlsocket</emphasis>,
	      but not both.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--label</option> <replaceable>string</replaceable>
	  </term>
          <listitem>
            <para>
	      Adds the string to all error messages generated by
	      <command>whack</command>.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The help form of <command>whack</command> is
	self-explanatory.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--help</option>
	  </term>
          <listitem>
            <para>
	      Display the usage message.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--version</option>
	  </term>
          <listitem>
            <para>
	      Display the version of <emphasis>whack</emphasis>.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The connection form describes a potential connection to
	<command>pluto</command>. <emphasis>pluto</emphasis> needs
	to know what connections can
	and should be negotiated. When <emphasis>pluto</emphasis>
	is the initiator, it needs to know what to propose. When
	<command>pluto</command> is the responder, it needs to know enough
	to decide whether is is willing to set up the proposed connection.
      </para>

      <para>
	The description of a potential connection can specify a large
	number of details. Each connection has a unique name. This
	name will appear in a updown shell command, so it should not
	contain punctuation that would make the command ill-formed.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      Sets the name of the connection.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The topology of a connection is symmetric, so to save space
	here is half a picture:
      </para>

      <para>client_subnet&lt;--&gt;host:ikeport&lt;--&gt;nexthop&lt;---</para>

      <para>
	A similar trick is used in the flags. The same flag names are
	used for both ends. Those before the <option>--to</option>
	flag describe the left side and those afterwards describe the
	right side. When <command>pluto</command> attempts
	to use the connection, it decides whether it is the left side
	or the right side of the connection, based on the IP numbers
	of its interfaces.
      </para>

      <variablelist>
        <varlistentry>
	  <term>
	    <option>--id</option> <replaceable>id</replaceable>
	  </term>
	  <listitem>
            <para>
	      The identity of the end. Currently, this can be an IP
	      address (specified as dotted quad or as a Fully
	      Qualified Domain Name, which will be resolved
	      immediately) or as a Fully Qualified Domain Name itself
	      (prefixed by "@" to signify that it should not be
	      resolved), or as user@FQDN, or an X.509 DN.
	      <emphasis>Pluto</emphasis> only authenticates the
	      identity, and does not use it for addressing, so, for
	      example, an IP address need not be the one to which
	      packets are to be sent. If the option is absent, the
	      identity defaults to the IP address specified by
	      <option>--host</option>.
	    </para>
	  </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--host</option> <replaceable>ip-address</replaceable>
	  </term>
          <term>
	    <option>--host</option> <replaceable>%any</replaceable>
	  </term>
          <term>
	    <option>--host</option> <replaceable>%opportunistic</replaceable>
	  </term>
          <listitem>
            <para>
	      The IP address of the end (generally the public
	      interface).  If <command>pluto</command> is
	      to act as a responder for IKE negotiations initiated
	      from unknown IP addresses (the "Road Warrior" case), the
	      IP address should be specified as <emphasis>%any</emphasis>
	      (currently, the obsolete notation <literal>0.0.0.0</literal>
	      is also accepted for this). If <command>pluto</command> is to
	      opportunistically initiate the connection,
	      use <emphasis>%opportunistic</emphasis>
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--cert</option> <replaceable>friendly_name</replaceable>
	  </term>
          <listitem>
            <para>
	      The friendly_name (or nickname) of the X.509 certificate
	      that was used when imported the certificate into the NSS
	      database. See <citerefentry>
	      <refentrytitle>ipsec.conf</refentrytitle>
	      <manvolnum>5</manvolnum> </citerefentry> on how to
	      extract this from the PKCS#12 file.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ckaid</option> <replaceable>CKAID</replaceable>
	  </term>
          <listitem>
	    <para>
	      The CKAID of the X.509 certificate or host key.
	    </para>
	    <para>
	      For X.509 certificates, the CKAID is either the
	      certificate's SubjectKeyIdentifier or the public key's
	      SHA1 fingerprint (when the SubjectKeyIdentifier isn't
	      specified).  For host keys the CKAID is the SHA1
	      fingerprint of the public key.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ca</option> <replaceable>distinguished name</replaceable>
	  </term>
          <listitem>
            <para>
	      The X.509 Certificate Authority's Distinguished Name
	      (DN) used as trust anchor for this connection. This is
	      the CA certificate that signed the host certificate, as
	      well as the certificate of the incoming client.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--groups</option> <replaceable>access control groups</replaceable>
	  </term>
          <listitem>
            <para>
	      The access control groups used.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--sendcert</option> <emphasis>yes|forced|always|ifasked|no|never</emphasis>
	  </term>
          <listitem>
            <para>
	      Whether or not to send our X.509 certificate
	      credentials.  This could potentially give an attacker
	      too much information about which identities are allowed
	      to connect to this host. The default is to use
	      <emphasis>ifasked</emphasis> when we are a Responder,
	      and to use <emphasis>yes</emphasis> (which is
	      the same as <emphasis>forced</emphasis> and
	      <emphasis>always</emphasis> if we are an
	      Initiator. The values <emphasis>no</emphasis>
	      and <emphasis>never</emphasis> are
	      equivalent. NOTE: "forced" does not seem to be actually
	      implemented - do not use it.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--sendca</option> <emphasis>none|issuer|all</emphasis>
	  </term>
          <listitem>
	    <para>
	      How much of our available X.509 trust chain to send with
	      the end certificate, excluding any root CAs. Specifying
	      <emphasis>issuer</emphasis> sends just the
	      issuing intermediate CA, while <emphasis>
	      all</emphasis> will send the entire chain of
	      intermediate CAs.<emphasis>none</emphasis>
	      will not send any CA certs. The default is
	      <emphasis>none</emphasis>
	      which maintains the current libreswan behavior.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--certtype</option> <replaceable>number</replaceable>
	  </term>
          <listitem>
            <para>
	      The X.509 certificate type number.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ikeport</option> <replaceable>port-number</replaceable>
	  </term>
          <listitem>
            <para>
	      The UDP port that IKE listens to on that host. The
	      default is 500. (<command>pluto</command> on
	      this machine uses the port specified by its own command
	      line argument, so this only affects where
	      <emphasis>pluto</emphasis> sends messages.)
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--nexthop</option><replaceable>ip-address</replaceable>
	  </term>
          <listitem>
            <para>
	      Where to route packets for the peer's client (presumably
	      for the peer too, but it will not be used for
	      this). When <command>pluto</command>
	      installs an IPsec SA, it issues a route command. It uses
	      the nexthop as the gateway. The default is the peer's IP
	      address (this can be explicitly written as <emphasis>%direct</emphasis>;
	      the obsolete notation<literal>0.0.0.0</literal> is accepted).
	      This option is necessary if <command>pluto</command>'s
	      host's interface used for sending packets to the peer is
	      neither point-to-point nor directly connected to the
	      peer.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--subnet</option> <replaceable>subnet</replaceable>
	  </term>
          <term>
	    <option>--client</option> <replaceable>subnet</replaceable>
	  </term>
          <listitem>
            <para>
	      The subnet for which the IPsec traffic will be destined.
	      If not specified, the host will be the client.  The
	      subnet can be specified using the general form
	      <replaceable>address</replaceable>/<replaceable>mask</replaceable>.
	      The most convenient form of the
	      <replaceable>mask</replaceable> is a decimal integer,
	      specifying the number of leading one bits in the mask.
	      So, for example, 10.0.0.0/8 would specify the class A
	      network "Net 10".
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--clientprotoport</option>
	    <replaceable>protocol</replaceable>/<replaceable>port</replaceable>
	  </term>
          <listitem>
            <para>
	      Specify the Port Selectors (filters) to be used on this
	      connection. The general form is
	      <emphasis>protocol</emphasis>/<emphasis>port</emphasis>.
	      This is most commonly used
	      to limit the connection to L2TP traffic only by
	      specifying a value of <emphasis>17/1701</emphasis>
	      for UDP (protocol 17) and
	      port 1701.  The notation <emphasis>17/%any</emphasis>
	      can be used to allow all UDP traffic and is needed for L2TP
	      connections with Windows XP machines before Service Pack 2.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--sourceip</option> <replaceable>ip-address</replaceable>
	  </term>
          <term>
	    <option>--srcip</option> <replaceable>ip-address</replaceable>
	  </term>
          <listitem>
            <para>
	      The IP address for this host to use when transmitting a
	      packet to the remote IPsec gateway itself.  This option
	      is used to make the gateway itself use its internal IP,
	      which is part of the <option>--client
	      <replaceable>subnet</replaceable></option>.  Otherwise
	      it will use its nearest IP address, which is its public
	      IP address, which is not part of the subnet-subnet IPsec
	      tunnel, and would therefore not get encrypted.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--xauthserver</option>
	  </term>
          <listitem>
            <para>
	      This end is an xauthserver. It will lookup the xauth user
              name and password and verify this before allowing the connection
              to get established.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--xauthclient</option>
	  </term>
          <listitem>
            <para>
	      This end is an xauthclient. To bring this connection up
	      with the <option>--initiate</option> also requires the
	      client to specify <option>--xauthuser
	      <replaceable>username</replaceable></option> and
	      <option>--xauthpass
	      <replaceable>password</replaceable></option>
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--xauthuser</option>
	  </term>
          <listitem>
            <para>
	      The username for the xauth authentication.This option is
	      normally passed along by <citerefentry>
	      <refentrytitle>ipsec_up</refentrytitle>
	      <manvolnum>8</manvolnum> </citerefentry> when an xauth
	      connection is started using <emphasis>ipsec
	      up conn</emphasis>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--xauthpass</option>
	  </term>
          <listitem>
            <para>
	      The password for the xauth authentication. This option
	      is normally passed along by <citerefentry>
	      <refentrytitle>ipsec_up</refentrytitle>
	      <manvolnum>8</manvolnum> </citerefentry> when an xauth
	      connection is started using <emphasis>ipsec
	      up conn</emphasis>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--modecfgserver</option>
	  </term>
          <listitem>
            <para>
	      This end is an Mode Config server.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--modecfgclient</option>
	  </term>
          <listitem>
            <para>
	      This end is an Mode Config client.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--modecfgdns</option>
	  </term>
          <listitem>
            <para>
	      A comma separated list of DNS server IP's to pass along
	      to connecting clients.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--modecfgdomains</option>
	  </term>
          <listitem>
            <para>
	      A comma separated list of internal DNS domains to pass
	      along to connecting clients.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--dnskeyondemand</option>
	  </term>
          <listitem>
            <para>
	      Specifies that when an RSA public key is needed to
	      authenticate this host, and it isn't already known,
	      fetch it from DNS.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--updown</option> <replaceable>updown</replaceable>
	  </term>
          <listitem>
            <para>
	      Specifies an external shell command to be run whenever
	      <command>pluto</command> brings up or down a
	      connection. The script is used to build a shell command,
	      so it may contain positional parameters, but ought not
	      to have punctuation that would cause the resulting
	      command to be ill-formed. The default is
	      <emphasis>ipsec _updown</emphasis>. Pluto passes a dozen
	      environment variables to the script about the connection
	      involved.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--to</option>
	  </term>
          <listitem>
            <para>
	      Separates the specification of the left and right ends
	      of the connection. Pluto tries to decide whether it is
	      <emphasis>left</emphasis> or <emphasis>right</emphasis>
	      based on the information
	      provided on both sides of this option.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The potential connection description also specifies
	characteristics of rekeying and security.
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--psk</option>
	  </term>
          <listitem>
            <para>
	      Propose and allow preshared secret authentication for
	      IKE peers. This authentication requires that each side
	      use the same secret. May be combined with
	      <option>--rsasig</option>; at least one must be
	      specified.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--rsasig</option>
	  </term>
          <listitem>
            <para>
	      Propose and allow RSA signatures for authentication of
	      IKE peers. This authentication requires that each side
	      have have a private key of its own and know the public
	      key of its peer. May be combined with
	      <option>--psk</option>; at least one must be
	      specified.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--encrypt</option>
	  </term>
          <listitem>
            <para>
	      All proposed or accepted IPsec SAs will include non-null
	      ESP. The actual choices of transforms are wired into
	      <command>pluto</command>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--authenticate</option>
	  </term>
          <listitem>
            <para>
	      All proposed IPsec SAs will include AH. All accepted
	      IPsec SAs will include AH or ESP with
	      authentication. The actual choices of transforms are
	      wired into <command>pluto</command>.  Note
	      that this has nothing to do with IKE
	      authentication.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--compress</option>
	  </term>
          <listitem>
            <para>
	      All proposed IPsec SAs will include IPCOMP
	      (compression).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--tunnel</option>
	  </term>
          <listitem>
            <para>
	      The IPsec SA should use tunneling. Implicit if the SA is
	      for clients. Must only be used with
	      <option>--authenticate</option> or
	      <option>--encrypt</option>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ipv4</option>
	  </term>
          <listitem>
            <para>
	      The host addresses will be interpreted as IPv4
	      addresses.  This is the default. Note that for a
	      connection, all host addresses must be of the same
	      Address Family (IPv4 and IPv6 use different Address
	      Families).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ipv6</option>
	  </term>
          <listitem>
            <para>
	      The host addresses (including nexthop) will be
	      interpreted as IPv6 addresses. Note that for a
	      connection, all host addresses must be of the same
	      Address Family (IPv4 and IPv6 use different Address
	      Families).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--tunnelipv4</option>
	  </term>
          <listitem>
            <para>
	      The client addresses will be interpreted as IPv4
	      addresses.  The default is to match what the host will
	      be. This does not imply <option>--tunnel</option> so the
	      flag can be safely used when no tunnel is actually
	      specified. Note that for a connection, all tunnel
	      addresses must be of the same Address Family.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--tunnelipv6</option>
	  </term>
          <listitem>
            <para>
	      The client addresses will be interpreted as IPv6
	      addresses.  The default is to match what the host will
	      be. This does not imply <option>--tunnel</option> so the
	      flag can be safely used when no tunnel is actually
	      specified. Note that for a connection, all tunnel
	      addresses must be of the same Address Family.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--pfs</option>
	  </term>
          <listitem>
            <para>
	      There should be Perfect Forward Secrecy - new keying
	      material will be generated for each IPsec SA when
	      running Quick Mode in IKEv1 or Create Child in
	      IKEv2. Without this option, the SAKMP SA keying material
	      is used instead.  <command>pluto</command>
	      will propose the same group that was used with the
	      original IKE SA.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--pfsgroup</option> <replaceable>modp-group</replaceable>
	  </term>
          <listitem>
            <para>
	      Sets the Diffie-Hellman group used. Currently the
	      following values are supported:
	      <emphasis>modp1536</emphasis> (DHgroup 5),
	      <emphasis>modp2048</emphasis> (DHgroup 14),
	      <emphasis>modp3072</emphasis> (DHgroup 15),
	      <emphasis>modp4096</emphasis> (DHgroup 16),
	      <emphasis>modp6144</emphasis> (DHgroup 17), and
	      <emphasis>modp8192</emphasis> (DHgroup 18).
	      It is possible to support the weak and broken
	      <emphasis>modp1024</emphasis> (DHgroup 2), but this
	      requires a manual recompile and is strongly
	      discouraged.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--esp</option> <replaceable>esp-algos</replaceable>
	  </term>
          <listitem>
            <para>
	      ESP encryption/authentication algorithm to be used for
	      the connection (phase2 aka IPsec SA). The options must
	      be suitable as a value of <citerefentry>
	      <refentrytitle>ipsec_spi</refentrytitle>
	      <manvolnum>8</manvolnum> </citerefentry>.  See
	      <citerefentry> <refentrytitle>ipsec.conf</refentrytitle>
	      <manvolnum>5</manvolnum> </citerefentry> for a detailed
	      description of the algorithm format.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--aggrmode</option>
	  </term>
          <listitem>
            <para>
	      This tunnel is using aggressive mode ISAKMP
	      negotiation. The default is main mode. Aggressive mode
	      is less secure than main mode as it reveals your
	      identity to an eavesdropper, but is needed to support
	      road warriors using PSK keys or to interoperate with
	      other buggy implementations insisting on using
	      aggressive mode.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--modecfgpull</option>
	  </term>
          <listitem>
            <para>
	      Pull the Mode Config network information from the peer.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--dpddelay</option> <replaceable>seconds</replaceable>
	  </term>
          <listitem>
            <para>
	      Set the delay (in seconds) between Dead Peer Detection
	      (RFC 3706) keepalives (R_U_THERE, R_U_THERE_ACK) that
	      are sent for this connection (default 30
	      seconds).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--timeout</option> <replaceable>seconds</replaceable>
	  </term>
          <listitem>
            <para>
	      Set the length of time (in seconds) we will idle without
	      hearing either an R_U_THERE poll from our peer, or an
	      R_U_THERE_ACK reply. After this period has elapsed with
	      no response and no traffic, we will declare the peer
	      dead, and remove the SA (default 120 seconds).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--forceencaps</option>
	  </term>
          <listitem>
            <para>
	      In some cases, for example when ESP packets are filtered
	      or when a broken IPsec peer does not properly recognise
	      NAT, it can be useful to force RFC-3948 encapsulation
	      using this option. It causes pluto lie and tell the
	      remote peer that RFC-3948 encapsulation (ESP in UDP port
	      4500 packets) is required.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	If none of the <option>--encrypt</option>,
	<option>--authenticate</option>, <option>--compress</option>,
	or <option>--pfs</option> flags is given, the initiating the
	connection will only build an ISAKMP SA. For such a
	connection, client subnets have no meaning and must not be
	specified.
      </para>

      <para>
	Apart from initiating directly using the
	<option>--initiate</option> option, a tunnel can be loaded
	with a different policy.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--initiateontraffic</option>
	  </term>
          <listitem>
            <para>
	      Only initiate the connection when we have traffic to
	      send over the connection.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--pass</option>
	  </term>
          <listitem>
            <para>
	      Allow <emphasis>unencrypted</emphasis> traffic
	      to flow until the tunnel is initiated.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--drop</option>
	  </term>
          <listitem>
            <para>
	      Drop unencrypted traffic silently.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--reject</option>
	  </term>
          <listitem>
            <para>
	      Drop unencrypted traffic silently, but send an ICMP
	      message notifying the other end.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	These options need to be documented:
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--failnone</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--failpass</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--faildrop</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--failreject</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	<command>pluto</command> supports various X.509
	Certificate related options.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--utc</option>
	  </term>
          <listitem>
            <para>
	      Display all times in UTC.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--listall</option>
	  </term>
          <listitem>
            <para>
	      Lists all of the X.509 information known to pluto.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--listpubkeys</option>
	  </term>
          <listitem>
            <para>
	      List all the public keys that have been successfully
	      loaded.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--listcerts</option>
	  </term>
          <listitem>
            <para>
	      List all the X.509 certificates that are currently
	      loaded.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--checkpubkeys</option>
	  </term>
          <listitem>
            <para>
	      List all the loaded X.509 certificates that are about to
	      expire or have expired.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--listcacerts</option>
	  </term>
          <listitem>
            <para>
	      List all the Certificate Authority X.509 certificates
	      that are currently loaded.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--listcrls</option>
	  </term>
          <listitem>
            <para>
	      List all the loaded <emphasis>Certificate
	      Revocation Lists</emphasis> (CRLs).
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The corresponding options <option>--rereadsecrets</option>,
	<option>--rereadall</option>, and
	<option>--rereadcrls</option> options reread this information
	from their respective sources, and purge all the online
	obtained information. The option <option>--listevents</option>
	lists all pending events, and the <option>--ddns</option>
	triggers the Dynamic DNS update event that is normally
	scheduled to run once every minute.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--ikelifetime</option> <replaceable>seconds</replaceable>
	  </term>
          <listitem>
            <para>
	      How long <command>pluto</command> will
	      propose that an ISAKMP SA be allowed to live. The
	      default is 3600 (one hour) and the maximum is 86400 (1
	      day). This option will not affect what is
	      accepted. <command>pluto</command> will
	      reject proposals that exceed the maximum.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ipseclifetime</option> <replaceable>seconds</replaceable>
	  </term>
          <listitem>
            <para>
	      How long <command>pluto</command> will
	      propose that an IPsec SA be allowed to live. The default
	      is 28800 (eight hours) and the maximum is 86400 (one
	      day). This option will not affect what is
	      accepted. <command>pluto</command> will
	      reject proposals that exceed the maximum.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--rekeymargin</option> <replaceable>seconds</replaceable>
	  </term>
          <listitem>
            <para>
	      How long before an SA's expiration should <emphasis>pluto</emphasis>
	      try to negotiate a replacement SA. This will only happen if
	      <emphasis>pluto</emphasis> was the initiator. The
	      default is 540 (nine minutes).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--rekeyfuzz</option> <replaceable>percentage</replaceable>
	  </term>
          <listitem>
            <para>
	      Maximum size of random component to add to rekeymargin,
	      expressed as a percentage of rekeymargin.
	      <emphasis>pluto</emphasis> will select a delay uniformly
	      distributed within this range. By default, the
	      percentage will be 100. If greater determinism is
	      desired, specify 0. It may be appropriate for the
	      percentage to be much larger than 100.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--dontrekey</option>
	  </term>
          <listitem>
            <para>
	      A misnomer. Only rekey a connection if we were the
	      Initiator and there was recent traffic on the existing
	      connection. This applies to Phase 1 and Phase 2. This is
	      currently the only automatic way for a connection to
	      terminate. It may be useful with Road Warrior or
	      Opportunistic connections. <!-- .br --> Since SA
	      lifetime negotiation is take-it-or-leave it, a Responder
	      normally uses the shorter of the negotiated or the
	      configured lifetime.  This only works because if the
	      lifetime is shorter than negotiated, the Responder will
	      rekey in time so that everything works. This interacts
	      badly with <option>--dontrekey</option>. In this case,
	      the Responder will end up rekeying to rectify a
	      shortfall in an IPsec SA lifetime; for an ISAKMP SA, the
	      Responder will accept the negotiated lifetime.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--delete</option>
	  </term>
          <listitem>
            <para>
	      When used in the connection form, it causes any previous
	      connection with this name to be deleted before this one
	      is added.  Unlike a normal delete, no diagnostic is
	      produced if there was no previous connection to
	      delete. Any routing in place for the connection is
	      undone.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--delete</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      The delete form deletes a named connection description
	      and any SAs established or negotiations initiated using
	      this connection. Any routing in place for the connection
	      is undone.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--deletestate</option> <replaceable>state-number</replaceable>
	  </term>
          <listitem>
            <para>
	      The deletestate form deletes the state object with the
	      specified serial number. This is useful for selectively
	      deleting instances of connections.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The route form of the <command>whack</command>
	command tells <command>pluto</command> to set up
	routing for a connection. Although like a traditional route,
	it uses an ipsec device as a virtual interface. Once routing
	is set up, no packets will be sent "in the clear" to the
	peer's client specified in the connection. A TRAP shunt eroute
	will be installed; if outbound traffic is caught, Pluto will
	initiate the connection. An explicit <emphasis>whack</emphasis>
	route is not always needed: if it hasn't been done when an Child SA
	is being installed, one will be automatically attempted.
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--route</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      When a routing is attempted for a connection, there must
	      not already be a routing for a different connection with
	      the same subnet but different interface or destination,
	      or if there is, it must not be being used by an IPsec
	      SA. Otherwise the attempt will fail.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--unroute</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      The unroute form of the <emphasis>whack</emphasis>
	      command tells <emphasis>pluto</emphasis>
	      to undo a routing. <emphasis>pluto</emphasis> will refuse if an IPsec SA is
	      using the connection. If another connection is sharing
	      the same routing, it will be left in place. Without a
	      routing, packets will be sent without encryption or
	      authentication.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The initiate form tells <command>pluto</command>
	to initiate a negotiation with another <emphasis>pluto</emphasis>
	(or other IKE daemon) according to
	the named connection. Initiation requires a route that
	<option>--route</option> would provide; if none is in place at
	the time an IPsec SA is being installed, <emphasis>pluto</emphasis>
	attempts to set one up.
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--initiate</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <term>
	    <option>--asynchronous</option>
	  </term>
          <listitem>
            <para>
	      The initiate form of the <emphasis>whack</emphasis>
	      command will relay back from <command>pluto</command>
	      status information via the UNIX domain socket
	      (unless --asynchronous is specified). Currently <emphasis>whack</emphasis>
	      simply copies this to stderr. When the request is finished (eg. the SAs are
	      established or <command>pluto</command>
	      gives up), <command>pluto</command> closes
	      the channel, causing <emphasis>whack</emphasis> to terminate.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The opportunistic initiate form is mainly used for debugging.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--tunnelipv4</option>
	  </term>
          <term>
	    <option>--tunnelipv6</option>
	  </term>
          <term>
	    <option>--oppohere</option> <replaceable>ip-address</replaceable>
	  </term>
          <term>
	    <option>--oppothere</option> <replaceable>ip-address</replaceable>
	  </term>
          <term>
	    <option>--opposport</option> <replaceable>port</replaceable>
	  </term>
          <term>
	    <option>--oppodport</option> <replaceable>port</replaceable>
	  </term>
          <term>
	    <option>--oppoproto</option> <replaceable>protocol</replaceable>
	  </term>
          <listitem>
            <para>
	      This will cause <command>pluto</command> to
	      attempt to opportunistically initiate a connection from
	      here to the there, even if a previous attempt had been
	      made. The whack log will show the progress of this
	      attempt.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Rekeying a connection</para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--rekey-ipsec</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      The rekey-ipsec form tells <emphasis>pluto</emphasis>
	      to rekey the Child SA (IPsec SA) of the specified connection.
	      It does not affect the IKE SA (ISAKMP SA).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--rekey-ike</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      The rekey-ike form tells <emphasis>pluto</emphasis> to rekey the IKE SA (parent
	      SA) of the specified connection. It does not affect the
	      IPsec SAs (child SAs).
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	Ending a connection
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--terminate</option>
	  </term>
          <term>
	    <option>--name</option> <replaceable>connection-name</replaceable>
	  </term>
          <listitem>
            <para>
	      The terminate form tells <emphasis>pluto</emphasis>
	      to delete any SAs that use the specified connection and to stop any negotiations in
	      process. it does not prevent new negotiations from
	      starting (the delete form has this effect).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--crash</option> <replaceable>ip-address</replaceable>
	  </term>
          <listitem>
            <para>
	      If the remote peer has crashed, and therefore did not
	      notify us, we keep sending encrypted traffic, and
	      rejecting all plaintext (non-IKE) traffic from that
	      remote peer. The <option>--crash</option> brings our end
	      down as well for all the known connections to the
	      specified <emphasis>ip-address</emphasis>.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>

        <varlistentry>
          <term>
	    <replaceable>ip-address</replaceable>
	  </term>
          <listitem>
            <para>
	      If the remote peer has crashed, and therefore did not
	      notify us, we keep sending encrypted traffic, and
	      rejecting all plaintext (non-IKE) traffic from that
	      remote peer. The <option>--crash</option> brings our end
	      down as well for all the known connections to the
	      specified <emphasis>ip-address</emphasis>.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	Redirecting clients can be done using IKEv2 redirect
	mechanism.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--global-redirect</option> <emphasis>yes|no|auto</emphasis>
	  </term>
          <listitem>
            <para>
	      The --global-redirect option controls whether <emphasis>pluto</emphasis>
	      will instruct remote peers to
	      redirect IKE/IPsec SA's during IKE_SA_INIT. Valid
	      options are <emphasis>no</emphasis>, <emphasis>yes</emphasis> and
	      <emphasis>auto</emphasis>, where auto means remote peers
	      will be redirected if DDoS mode is active.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--global-redirect-to</option> <replaceable>ip-address(es)</replaceable>
	  </term>
          <listitem>
            <para>
	      The destination, or a list of destinations, where the
	      peers will be redirected.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--name</option> <replaceable>connection_name</replaceable>
	  </term>
          <term>
	    <option>--redirect-to</option> <replaceable>ip-address(es)</replaceable>
	  </term>
          <listitem>
            <para>
	      The destination, or a list of destinations, where the
	      peers will be redirected.  Specifying the connection
	      name is optional. If not specified the mechanism will
	      redirect all currently active peers.  If specified, only
	      the peers from connection <emphasis>connection_name</emphasis>
	      will be redirected.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	The public key for informs <emphasis>pluto</emphasis> of the RSA public key for a
	potential peer. Private keys must be kept secret, so they are
	kept in <citerefentry>
	<refentrytitle>ipsec.secrets</refentrytitle>
	<manvolnum>5</manvolnum> </citerefentry>.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--keyid</option> <replaceable>id</replaceable>
	  </term>
          <listitem>
            <para>
	      Specififies the identity of the peer for which a public
	      key should be used. Its form is identical to the
	      identity in the connection. If no public key is
	      specified, <command>pluto</command> attempts
	      to find KEY records from DNS for the id (if a FQDN) or
	      through reverse lookup (if an IP address). Note that
	      there several interesting ways in which this is not
	      secure.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--addkey</option>
	  </term>
          <listitem>
            <para>
	      Specifies that the new key is added to the collection;
	      otherwise the new key replaces any old ones.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--pubkeyrsa</option> <replaceable>key</replaceable>
	  </term>
          <listitem>
            <para>
	      Specifies the value of the RSA public key. It is a
	      sequence of bytes as described in RFC 2537 "RSA/MD5 KEYs
	      and SIGs in the Domain Name System (DNS)". For example, a
	      base 64 numeral starts with 0s.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The listen form tells <command>pluto</command> to
	start listening for IKE requests on its public interfaces. To
	avoid race conditions, it is normal to load the appropriate
	connections into <command>pluto</command> before
	allowing it to listen. If <command>pluto</command>
	isn't listening, it is pointless to initiate negotiations, so
	it will refuse requests to do so. Whenever the listen form is
	used, <command>pluto</command> looks for public
	interfaces and will notice when new ones have been added and
	when old ones have been removed. This is also the trigger for
	<command>pluto</command> to read the <emphasis>@@IPSEC_SECRETS@@</emphasis>
	file. So listen may useful more than once.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--listen</option>
	  </term>
          <listitem>
            <para>
	      Start listening for IKE traffic on public interfaces.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--unlisten</option>
	  </term>
          <listitem>
            <para>
	      Stop listening for IKE traffic on public interfaces.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The --ddos-auto, --ddos-busy and --ddos-unlimited options
	tells <command>pluto</command> to update the DDoS
	protection state. Normally, these measures are automatically
	activated or deactivated based on the number of states inside
	pluto. The busy and unlimited option tells pluto to activate
	or deactivate the DDoS protection mode manually.  One of these
	DDoS protection methods is to activate IKEv2 DCOOKIEs to
	defend against spoofed IKE packets.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--ddos-busy</option>
	  </term>
          <listitem>
            <para>
	      Place pluto into busy mode and activate anti-DDoS measures.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ddos-unlimited</option>
	  </term>
          <listitem>
            <para>
	      Pull pluto out of busy mode and deactivate anti-DDoS measures.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ddos-auto</option>
	  </term>
          <listitem>
            <para>
	      Activate the built-in detection mechanism for the
	      anti-DDoS measures.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The status form will display information about the internal
	state of <command>pluto</command>: information
	about each potential connection, about each state object, and
	about each shunt that <command>pluto</command> is
	managing without an associated connection.
      </para>

      <para>
	Statistics can be seen using <emphasis>ipsec whack
	--globalstats</emphasis> and reset using
	<emphasis>ipsec whack --clearstats</emphasis>.
	This can be used with the munin software to monitor VPN services.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--status</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The trafficstatus form will display the xauth username,
	add_time and the total in and out bytes of the IPsec SA's.
      </para>

      <variablelist>

	<varlistentry>
	  <term>
	    <option>--trafficstatus</option>
	  </term>
	  <listitem>
	    <para>
	      To be documented
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>

      <para>
	The shutdown form is the proper way to shut down <emphasis>pluto</emphasis>.
	It will tear down the SAs on this machine that <command>pluto</command> has
	negotiated. If the <emphasis>--leave-state</emphasis> option is given, it does
	not delete any connections, and leaves the kernel state in the
	kernel. Note that the init system used might clean up the
	kernel state regardless.
      </para>

      <variablelist>
        <varlistentry>
          <term>
	    <option>--shutdown</option>
	  </term>
          <listitem>
            <para>
	      To be documented.
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

    </refsect2>

    <refsect2 id="examples">
      <title>Old Examples</title>

      <para>It would be normal to start <command>pluto</command>
      in one of the system initialization scripts. It needs to be run by the
      superuser. Generally, no arguments are needed. To run in manually, the
      superuser can simply type</para>

      <para>ipsec pluto</para>

      <para>The command will immediately return, but a <emphasis>pluto</emphasis>
      process will be left running, waiting for
      requests from <command>whack</command> or a peer.</para>

      <para>Using <command>whack</command>, several potential
      connections would be described:</para>

      <!-- .na -->

      <para>ipsec whack --name silly
      --host 127.0.0.1 --to --host 127.0.0.2 --ikelifetime 900
      --ipseclifetime 800 --keyingtries 3</para>

      <!-- .ad -->

      <para>Since this silly connection description specifies neither
      encryption, authentication, nor tunneling, it could only be used to
      establish an ISAKMP SA.</para>

      <!-- .na -->

      <para>ipsec whack --name conn_name
      --host 10.0.0.1 --client 10.0.1.0/24 --to --host 10.0.0.2
      --client 10.0.2.0/24 --encrypt</para>

      <!-- .ad -->

      <para>This is something that must be done on both sides. If the other
      side is <command>pluto</command>, the same <emphasis>whack</emphasis>
      command could be used on it (the command
      syntax is designed to not distinguish which end is ours).</para>

      <para>Now that the connections are specified, <emphasis>pluto</emphasis>
      is ready to handle requests and replies via
      the public interfaces. We must tell it to discover those interfaces and
      start accepting messages from peers:</para>

      <para>   ipsec whack --listen</para>

      <para>If we don't immediately wish to bring up a secure connection
      between the two clients, we might wish to prevent insecure traffic. The
      routing form asks <command>pluto</command> to cause the
      packets sent from our client to the peer's client to be routed through
      the ipsec0 device; if there is no SA, they will be discarded:</para>

      <para>   ipsec whack --route conn_name</para>

      <para>Finally, we are ready to get <command>pluto</command>
      to initiate negotiation for an IPsec SA (and implicitly, an ISAKMP
      SA):</para>

      <para>   ipsec whack
      --initiate --name conn_name</para>

      <para>A small log of interesting events will appear on standard output
      (other logging is sent to syslog).</para>

      <para><command>whack</command> can also be used to terminate
      <command>pluto</command> cleanly, tearing down all SAs that
      it has negotiated.</para>

      <para>   ipsec whack --shutdown</para>

      <para>Notification of any IPSEC SA deletion, but not ISAKMP SA deletion
      is sent to the peer. Unfortunately, such Notification is not reliable.
      Furthermore, <command>pluto</command> itself ignores
      Notifications.</para>
    </refsect2>

    <refsect2 id="xauth">
      <title>XAUTH</title>

      <para>If <command>pluto</command> needs additional
      authentication, such as defined by the XAUTH specifications, then it may
      ask <command>whack</command> to prompt the operator for
      username or passwords. Typically, these will be entered interactively. A
      GUI that wraps around <command>whack</command> may look for
      the 041 (username) or 040 (password) prompts, and display them to the
      user.</para>

      <para>
	For testing purposes, the options
	<option>--xauthuser</option>
	<replaceable>user</replaceable>
	<option>--xauthpass</option>
	<replaceable>pass</replaceable> may be be given prior to the
	<option>--initiate</option> to provide responses to the
	username and password prompts.
      </para>
    </refsect2>

    <refsect2 id="rekeying">
      <title>Rekeying</title>

      <para>When an SA that was initiated by <emphasis>pluto</emphasis>
      has only a bit of lifetime left, <emphasis>pluto</emphasis> will
      initiate the creation of a new SA. This
      applies to ISAKMP and IPsec SAs. The rekeying will be initiated when the
      SA's remaining lifetime is less than the rekeymargin plus a random
      percentage, between 0 and rekeyfuzz, of the rekeymargin.</para>

      <para>Similarly, when an SA that was initiated by the peer has only a
      bit of lifetime left, <command>pluto</command> will try to
      initiate the creation of a replacement. To give preference to the
      initiator, this rekeying will only be initiated when the SA's remaining
      lifetime is half of rekeymargin. If rekeying is done by the responder,
      the roles will be reversed: the responder for the old SA will be the
      initiator for the replacement. The former initiator might also initiate
      rekeying, so there may be redundant SAs created. To avoid these
      complications, make sure that rekeymargin is generous.</para>

      <para>One risk of having the former responder initiate is that perhaps
      none of its proposals is acceptable to the former initiator (they have
      not been used in a successful negotiation). To reduce the chances of
      this happening, and to prevent loss of security, the policy settings are
      taken from the old SA (this is the case even if the former initiator is
      initiating). These may be stricter than those of the connection.</para>

      <para><command>pluto</command> will not rekey an SA if that
      SA is not the most recent of its type (IPsec or ISAKMP) for its
      potential connection. This avoids creating redundant SAs.</para>

      <para>The random component in the rekeying time (rekeyfuzz) is intended
      to make certain pathological patterns of rekeying unstable. If both
      sides decide to rekey at the same time, twice as many SAs as necessary
      are created. This could become a stable pattern without the
      randomness.</para>

      <para>Another more important case occurs when a security gateway has SAs
      with many other security gateways. Each of these connections might need
      to be rekeyed at the same time. This would cause a high peek requirement
      for resources (network bandwidth, CPU time, entropy for random numbers).
      The rekeyfuzz can be used to stagger the rekeying times.</para>

      <para>Once a new set of SAs has been negotiated, <emphasis>pluto</emphasis>
      will never send traffic on a superseded one.
      Traffic will be accepted on an old SA until it expires.</para>
    </refsect2>

    <refsect2 id="selecting_a_connection_when_responding_r">
      <title>Selecting a Connection When Responding: Road Warrior
      Support</title>

      <para>When <command>pluto</command> receives an initial Main
      Mode message, it needs to decide which connection this message is for.
      It picks based solely on the source and destination IP addresses of the
      message. There might be several connections with suitable IP addresses,
      in which case one of them is arbitrarily chosen. (The ISAKMP SA proposal
      contained in the message could be taken into account, but it is
      not.)</para>

      <para>The ISAKMP SA is negotiated before the parties pass further
      identifying information, so all ISAKMP SA characteristics specified in
      the connection description should be the same for every connection with
      the same two host IP addresses. At the moment, the only characteristic
      that might differ is authentication method.</para>

      <para>Up to this point, all configuring has presumed that the IP
      addresses are known to all parties ahead of time. This will not work
      when either end is mobile (or assigned a dynamic IP address for other
      reasons). We call this situation "Road Warrior". It is fairly tricky and
      has some important limitations, most of which are features of the IKE
      protocol.</para>

      <para>Only the initiator may be mobile: the initiator may have an IP
      number unknown to the responder. When the responder doesn't recognize
      the IP address on the first Main Mode packet, it looks for a connection
      with itself as one end and <emphasis>%any</emphasis> as the
      other. If it cannot find one, it refuses to negotiate. If it does find
      one, it creates a temporary connection that is a duplicate except with
      the <emphasis>%any</emphasis> replaced by the source IP
      address from the packet; if there was no identity specified for the
      peer, the new IP address will be used.</para>

      <para>When <command>pluto</command> is using one of these
      temporary connections and needs to find the preshared secret or RSA
      private key in <emphasis>ipsec.secrets</emphasis>, and the
      connection specified no identity for the peer, <emphasis>%any</emphasis>
      is used as its identity. After all, the real
      IP address was apparently unknown to the configuration, so it is
      unreasonable to require that it be used in this table.</para>

      <para>Part way into the Phase 1 (Main Mode) negotiation using one of
      these temporary connection descriptions, <emphasis>pluto</emphasis>
      will receive an Identity Payload. At this
      point, <command>pluto</command> checks for a more
      appropriate connection, one with an identity for the peer that matches
      the payload and would use the same keys as so far used for
      authentication. If it finds one, it will switch to using this better
      connection (or a temporary one derived from this, if it has <emphasis>%any</emphasis>
      for the peer's IP address). It may even turn
      out that no connection matches the newly discovered identity, including
      the current connection; if so, <command>pluto</command>
      terminates negotiation.</para>

      <para>Unfortunately, if preshared secret authentication is being used,
      the Identity Payload is encrypted using this secret, so the secret must
      be selected by the responder without knowing this payload. This limits
      there to being at most one preshared secret for all Road Warrior systems
      connecting to a host. RSA Signature authentication does not require
      that the responder knows how to select the initiator's public key until
      after the initiator's Identity Payload is decoded (using the responder's
      private key, so that must be preselected).</para>

      <para>When <command>pluto</command> is responding to a Quick
      Mode negotiation via one of these temporary connection descriptions, it
      may well find that the subnets specified by the initiator don't match
      those in the temporary connection description. If so, it will look for a
      connection with matching subnets, its own host address, a peer address
      of <emphasis>%any</emphasis> and matching identities. If it
      finds one, a new temporary connection is derived from this one and used
      for the Quick Mode negotiation of IPsec SAs. If it does not find one,
      <command>pluto</command> terminates negotiation.</para>

      <para>Be sure to specify an appropriate nexthop for the responder to
      send a message to the initiator: <command>pluto</command>
      has no way of guessing it (if forwarding isn't required, use an explicit
      <emphasis>%direct</emphasis> as the nexthop and the IP address
      of the initiator will be filled in; the obsolete notation
      <literal>0.0.0.0</literal> is still accepted).</para>

      <para><command>pluto</command> has no special provision for
      the initiator side. The current (possibly dynamic) IP address and
      nexthop must be used in defining connections. These must be properly
      configured each time the initiator's IP address changes.
      <emphasis>pluto</emphasis> has no mechanism to do this
      automatically.</para>

      <para>Although we call this Road Warrior Support, it could also be used
      to support encrypted connections with anonymous initiators. The
      responder's organization could announce the preshared secret that would
      be used with unrecognized initiators and let anyone connect. Of course
      the initiator's identity would not be authenticated.</para>

      <para>If any Road Warrior connections are supported, <emphasis>pluto</emphasis>
      cannot reject an exchange initiated by an
      unknown host until it has determined that the secret is not shared or
      the signature is invalid. This must await the third Main Mode message
      from the initiator. If no Road Warrior connection is supported, the
      first message from an unknown source would be rejected. This has
      implications for ease of debugging configurations and for denial of
      service attacks.</para>

      <para>Although a Road Warrior connection must be initiated by the mobile
      side, the other side can and will rekey using the temporary connection
      it has created. If the Road Warrior wishes to be able to disconnect, it
      is probably wise to set <option>--keyingtries</option> to 1 in the
      connection on the non-mobile side to prevent it trying to rekey the
      connection. Unfortunately, there is no mechanism to unroute the
      connection automatically.</para>
    </refsect2>

    <refsect2 id="debugging">
      <title>Debugging</title>

      <para>
	<command>pluto</command> accepts several optional
	arguments, useful mostly for debugging. Except for
	<option>--interface</option>, each should appear at most
	once.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--interface</option> <replaceable>interfacename</replaceable>
	  </term>
          <listitem>
            <para>
	      Specifies that the named real public network interface
	      should be considered. The interface name specified
	      should not be <command>ipsec</command><emphasis>N</emphasis>.
	      If the option doesn't appear, all interfaces are considered.
	      To specify several interfaces, use the option once for each. One use of
	      this option is to specify which interface should be used
	      when two or more share the same IP address.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ikeport</option> <replaceable>port-number</replaceable>
	  </term>
          <listitem>
            <para>
	      Changes the UDP port that <emphasis>pluto</emphasis> will use
	      (default, specified by IANA: 500).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--ctlbase</option> <replaceable>path</replaceable>
	  </term>
          <listitem>
            <para>
	      Basename for control files. <emphasis>path</emphasis>.ctl
	      is the socket through
	      which <command>whack</command> communicates
	      with <command>pluto</command>. <emphasis>path</emphasis>.pid
	      is the lockfile to prevent multiple <command>pluto</command>
	      instances. The default is
	      <filename>@@RUNDIR@@/pluto.pid</filename>).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--secretsfile</option> <replaceable>file</replaceable>
	  </term>
          <listitem>
            <para>
	      Specifies the file for authentication secrets (default:
	      <filename>@@IPSEC_SECRETS@@</filename>). This name is
	      subject to "globbing" as in <citerefentry>
	      <refentrytitle>sh</refentrytitle>
	      <manvolnum>1</manvolnum> </citerefentry>, so every file
	      with a matching name is processed. Quoting is generally
	      needed to prevent the shell from doing the globbing.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--nofork</option>
	  </term>
          <listitem>
            <para>
	      Disable "daemon fork" (default is to fork). In addition,
	      after the lock file and control socket are created,
	      print the line "Pluto initialized" to standard
	      out.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--uniqueids</option>
	  </term>
          <listitem>
            <para>
	      If this option has been selected, whenever a new ISAKMP
	      SA is established, any connection with the same Peer ID
	      but a different Peer IP address is unoriented (causing
	      all its SAs to be deleted). This helps clean up dangling
	      SAs when a connection is lost and then regained at
	      another IP address.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--force-busy</option>
	  </term>
          <listitem>
            <para>
	      If this option has been selected, pluto will be forced
	      to be "busy". In this state, which happens when there is
	      a Denial of Service attack, will force pluto to use
	      cookies before accepting new incoming IKE
	      packets. Cookies are send and required in ikev1
	      Aggressive Mode and in ikev2.  This option is mostly
	      used for testing purposes, but can be selected by
	      paranoid administrators as well.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--stderrlog</option>
	  </term>
          <listitem>
            <para>
	      Log goes to standard out (default is to use
	      <citerefentry> <refentrytitle>syslogd</refentrytitle>
	      <manvolnum>8</manvolnum> </citerefentry>).
	    </para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>
	<command>pluto</command> is willing to produce a
	prodigious amount of debugging information.  There are several
	classes of debugging output, and <emphasis>pluto</emphasis>
	may be directed to produce a
	selection of them.  All lines of debugging output are prefixed
	with "|" to distinguish them from normal diagnostic
	messages.
      </para>

      <para>
	When <command>pluto</command> is invoked, it may
	be given arguments to specify which debug classes to output.
	The current options are:
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--debug help</option> (whack only)
	  </term>
          <listitem>
            <para>
	      List the debugging classes recognised by <emphasis>pluto</emphasis>.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--debug none</option>
	  </term>
          <listitem>
            <para>
	      Disable logging for all debugging classes.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--debug base</option>
	  </term>
          <listitem>
            <para>
	      Enable debug-logging.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--debug cpu-usage</option>
	  </term>
          <listitem>
            <para>
	      Enable cpu-usage logging.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--debug <replaceable>class</replaceable></option>
	  </term>
          <term>
	    <option>--no-debug <replaceable>class</replaceable></option>
	  </term>
          <term>
	    <option>--debug no-<replaceable>class</replaceable></option>
	  </term>
          <listitem>
            <para>
	      Enable (disable) logging of the specified debugging
	      <replaceable>class</replaceable> (<option>--debug
	      help</option> lists debugging classes supported by this
	      version of <command>pluto</command>).
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

      <para>
	The debug form of the <command>whack</command>
	command will change the selection in a running <emphasis>pluto</emphasis>.
	If a connection name is specified,
	the flags are added whenever <emphasis>pluto</emphasis>
	has identified that it is dealing
	with that connection.  Unfortunately, this is often part way
	into the operation being observed.
      </para>

      <para>
	For example, to start <command>pluto</command>
	with both <emphasis>base</emphasis> and
	<emphasis>cpu-usage</emphasis> debug-logging enabled:
      </para>

      <para>
	<userinput>ipsec pluto --debug base --debug cpu-usage</userinput>
      </para>

      <para>
	To later change this <command>pluto</command> to
	disable <emphasis>base</emphasis> debug-logging use either:
      </para>

      <para>
	<userinput>ipsec whack --no-debug base</userinput>
      </para>

      <para>
	or:
      </para>

      <para>
	<userinput>ipsec whack --debug none --debug cpu-usage</userinput>
      </para>

    </refsect2>

    <refsect2 id="impairing">
      <title>Impairing</title>

      <para>
	<command>pluto</command> and <emphasis>whack</emphasis>
	accept several optional arguments
	that alter (impair) correct behaviour.
      </para>
      <para>
	These options are solely intended for use by developers when
	testing <command>pluto</command>.
      </para>

      <variablelist>

        <varlistentry>
          <term>
	    <option>--impair help</option> (whack only)
	  </term>
          <listitem>
            <para>
	      List all the behaviours that can be altered (impaired).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--impair list</option> (whack only)
	  </term>
          <listitem>
            <para>
	      List all the behaviours that are currently altered
	      (impaired).
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--impair none</option>
	  </term>
          <listitem>
            <para>
	      Disable all altered (impaired) behaviours.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
	    <option>--impair <replaceable>behaviour</replaceable></option>
	  </term>
          <term>
	    <option>--impair <replaceable>behaviour</replaceable>:<replaceable>how</replaceable></option>
	  </term>
          <term>
	    <option>--no-impair <replaceable>behaviour</replaceable></option>
	  </term>
          <listitem>
            <para>
	      Alter (impair) <command>pluto</command>
	      inducing the (possibly erroneous)
	      <replaceable>behaviour</replaceable>.
	    </para>
          </listitem>
        </varlistentry>

      </variablelist>

    </refsect2>

    <refsect2 id="plutos_behaviour_when_things_go_wrong">
      <title>Pluto's Behaviour When Things Go Wrong</title>

      <para>
	When <command>pluto</command> doesn't understand or
	accept a message, it just ignores the message. It is not yet capable of
	communicating the problem to the other IKE daemon (in the future it
	might use Notifications to accomplish this in many cases). It does log a
	diagnostic.
      </para>

      <para>
	When <command>pluto</command> gets no response from a
	message, it resends the same message (a message will be sent at most
	three times). This is appropriate: UDP is unreliable.
      </para>

      <para>
	When pluto gets a message that it has already seen, there are many
	cases when it notices and discards it. This too is appropriate for
	UDP.
      </para>

      <para>
	Combine these three rules, and you can explain many apparently
	mysterious behaviours. In a <command>pluto</command> log,
	retrying isn't usually the interesting event. The critical thing is
	either earlier (<command>pluto</command> got a message that
	it didn't like and so ignored, so it was still awaiting an acceptable
	message and got impatient) or on the other system (<emphasis>pluto</emphasis>
	didn't send a reply because it wasn't happy
	with the previous message).
      </para>
    </refsect2>

    <refsect2 id="notes">
      <title>Notes</title>

      <para>
	Each IPsec SA is assigned an SPI, a 32-bit number used to refer to
	the SA. The IKE protocol lets the destination of the SA choose the SPI.
	The range 0 to 0xFF is reserved for IANA. <emphasis>Pluto</emphasis>
	also avoids choosing an SPI in the range
	0x100 to 0xFFF, leaving these SPIs free for manual keying. Remember that
	the peer, if not <command>pluto</command>, may well chose
	SPIs in this range.
      </para>
    </refsect2>

    <refsect2 id="policies">
      <title>Policies</title>

      <para>
	This catalogue of policies may be of use when trying to configure
	<command>pluto</command> and another IKE implementation to
	interoperate.
      </para>

      <para>
	In Phase 1, only Main Mode is supported. We are not sure that
	Aggressive Mode is secure. For one thing, it does not support identity
	protection. It may allow more severe Denial Of Service attacks.
      </para>

      <para>
	No Informational Exchanges are supported. These are optional and
	since their delivery is not assured, they must not matter. It is the
	case that some IKE implementations won't interoperate without
	Informational Exchanges, but we feel they are broken.
      </para>

      <para>
	No Informational Payloads are supported. These are optional, but
	useful. It is of concern that these payloads are not authenticated in
	Phase 1, nor in those Phase 2 messages authenticated with
	HASH(3).
      </para>

      <variablelist>
        <varlistentry>
          <term>•</term>

          <listitem>
            <para>Diffie Hellman Group MODP 1536 (5) is
            supported. Groups MODP768 and MODP 1024 (1 and 2) are
	    not supported because those are too weak.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>Host authentication can be done by RSA Signatures or
            Pre-Shared Secrets.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>
	      TODO! This information is outdated.
	      3DES CBC (Cypher Block Chaining mode) is the only encryption
              supported, both for ISAKMP SAs and IPSEC SAs.
	    </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>MD5 and SHA1 hashing are supported for packet authentication
            in both kinds of SAs.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>The ESP, AH, or AH plus ESP are supported. If, and only if,
            AH and ESP are combined, the ESP need not have its own
            authentication component. The selection is controlled by the
            --encrypt and --authenticate flags.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>Each of these may be combined with IPCOMP Deflate
            compression, but only if the potential connection specifies
            compression.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>The IPSEC SAs may be tunnel or transport mode, where
            appropriate. The --tunnel flag controls this when
	    <emphasis>pluto</emphasis> is initiating.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>When responding to an ISAKMP SA proposal, the maximum
            acceptable lifetime is eight hours. The default is one hour. There
            is no minimum. The --ikelifetime flag controls this when
	    <emphasis>pluto</emphasis> is initiating.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>When responding to an IPSEC SA proposal, the maximum
            acceptable lifetime is one day. The default is eight hours. There
            is no minimum. The --ipseclifetime flag controls this when
            <command>pluto</command> is initiating.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>•</term>

          <listitem>
            <para>PFS is acceptable, and will be proposed if the --pfs flag
            was specified. The DH group proposed will be the same as
            negotiated for Phase 1.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <refsect1 id="signals">
    <title>SIGNALS</title>

    <para><command>pluto</command> responds to
    <constant>SIGHUP</constant> by issuing a suggestion that
    ``<emphasis>whack</emphasis> --listen'' might have been intended.</para>

    <para><command>pluto</command> exits when it receives
    <constant>SIGTERM</constant>.</para>
  </refsect1>

  <refsect1 id="exit_status">
    <title>EXIT STATUS</title>

    <para><command>pluto</command> normally forks a daemon
    process, so the exit status is normally a very preliminary result.</para>

    <variablelist>
      <varlistentry>
        <term>0</term>

        <listitem>
          <para>means that all is OK so far.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>1</term>

        <listitem>
          <para>means that something was wrong.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>10</term>

        <listitem>
          <para>means that the lock file already exists.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>If <command>whack</command> detects a problem, it will
    return an exit status of 1. If it received progress messages from
    <command>pluto</command>, it returns as status the value of
    the numeric prefix from the last such message that was not a message sent
    to syslog or a comment (but the prefix for success is treated as 0).
    Otherwise, the exit status is 0.</para>
  </refsect1>

  <refsect1 id="files">
    <title>FILES</title>

    <para><filename>@@RUNDIR@@/pluto.pid</filename>
    <filename>@@RUNDIR@@/pluto.ctl</filename>
    <filename>@@IPSEC_SECRETS@@</filename>
    <filename>/dev/urandom</filename></para>
  </refsect1>

  <refsect1 id="environment">
    <title>ENVIRONMENT</title>

    <para>pluto does not use any environment variables</para>
  </refsect1>

  <refsect1 id="see_also">
    <title>SEE ALSO</title>

    <para>The rest of the Libreswan distribution, in particular
    <citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>

    <para>
      <citerefentry>
        <refentrytitle>ipsec</refentrytitle>
        <manvolnum>8</manvolnum>
      </citerefentry>
      is designed to make using <command>pluto</command>
      more pleasant. Use it!
    </para>

    <para>
      <citerefentry>
        <refentrytitle>ipsec.secrets</refentrytitle>
        <manvolnum>5</manvolnum>
      </citerefentry>
      describes the format of the secrets file.
    </para>

    <para>
      For more information on IPsec, the mailing list, and the relevant
      documents, see:
    </para>

    <para>
      <emphasis><ulink url="https://datatracker.ietf.org/wg/ipsecme/charter/">https://datatracker.ietf.org/wg/ipsecme/charter/</ulink></emphasis>
    </para>

    <para>
      At the time of writing, the latest IETF IKE RFC is:
    </para>

    <para>
      RFC 7296 Internet Key Exchange Protocol Version 2 (IKEv2)
    </para>

    <para>
      The Libreswan web site <emphasis><ulink url="https://libreswan.org">https://libreswan.org</ulink></emphasis> and the mailing
      lists described there.
    </para>

    <para>
      The Libreswan wiki <emphasis><ulink url="https://libreswan.org/wiki">https://libreswan.org/wiki</ulink></emphasis> includes documentation.
    </para>

    <para>
      The Libreswan list of implemented RFCs <emphasis><ulink url="https://libreswan.org/wiki/Implemented_Standards">https://libreswan.org/wiki/Implemented_Standards</ulink></emphasis>.
    </para>
  </refsect1>

  <refsect1 id="history">
    <title>HISTORY</title>

    <para>
      This code is released under the GPL terms. See the accompanying
      files CHANGES COPYING and CREDITS.* for more details.
    </para>

    <para>
      Detailed history (including FreeS/WAN and Openswan) can be found in the docs/ directory.
    </para>

  </refsect1>

  <refsect1 id="bugs">
    <title>BUGS</title>

    <para>Please see
    &lt;<ulink url="https://github.com/libreswan/libreswan/issues">https://github.com/libreswan/libreswan/issues</ulink>&gt;
    for a list of currently known bugs and missing features.</para>

    <para>
      Bugs should be reported to the &lt;swan-dev@lists.libreswan.org&gt;
      mailing list.
    </para>
  </refsect1>

  <refsect1 id='author'>
    <title>AUTHOR</title>
    <para>
      <author><personname><firstname>Paul</firstname><surname>Wouters</surname></personname></author>
      <author><personname><firstname>Andrew</firstname><surname>Cagney</surname></personname></author>
    </para>
  </refsect1>
</refentry>
